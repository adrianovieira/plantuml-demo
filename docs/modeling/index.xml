<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PlantUML demo â€“ PlantUML for Architecture &amp; Modeling</title><link>http://adrianovieira.github.io/plantuml-demo/docs/modeling/</link><description>Recent content in PlantUML for Architecture &amp; Modeling on PlantUML demo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 Nov 2021 12:04:25 -0300</lastBuildDate><atom:link href="http://adrianovieira.github.io/plantuml-demo/docs/modeling/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Mindmap Diagram.md</title><link>http://adrianovieira.github.io/plantuml-demo/docs/modeling/plantuml-mindmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://adrianovieira.github.io/plantuml-demo/docs/modeling/plantuml-mindmap/</guid><description>
&lt;h1 id="plantuml-demo">PlantUML demo&lt;/h1>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;PlantUML in a nutshell. PlantUML is a component that allows to quickly write: Sequence diagram. Usecase diagram. Class diagram. Object diagram. Activity diagram (here is the legacy syntax) Component diagram. Deployment diagram&amp;rdquo;&lt;/em> - &lt;a href="http://PlantUML.com">PlantUML.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;h3 id="mindmap-diagram">MindMap Diagram&lt;/h3>
&lt;ul>
&lt;li>Mindmap OrgMode syntax&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startmindmap
* Debian
** Ubuntu
*** Linux Mint
*** Kubuntu
*** Lubuntu
*** KDE Neon
** LMDE
** SolydXK
** SteamOS
** Raspbian with a very long name
*** &amp;lt;s&amp;gt;Raspmbc&amp;lt;/s&amp;gt; =&amp;gt; OSMC
*** &amp;lt;s&amp;gt;Raspyfi&amp;lt;/s&amp;gt; =&amp;gt; Volumio
@endmindmap
&lt;/code>&lt;/pre></description></item><item><title>Docs: UML Modeling</title><link>http://adrianovieira.github.io/plantuml-demo/docs/modeling/uml/</link><pubDate>Fri, 26 Nov 2021 12:33:16 -0300</pubDate><guid>http://adrianovieira.github.io/plantuml-demo/docs/modeling/uml/</guid><description>
&lt;p>Unified Modeling Language (UML)&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;&lt;em>The Unified Modeling Language (UML) is a general-purpose, developmental, modeling language in the field of software engineering that is intended to provide a standard way to visualize the design of a system&lt;/em>&amp;rdquo;. - &lt;a href="https://en.wikipedia.org/wiki/Unified_Modeling_Language">Wikipedia&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: C4 Model Diagraming</title><link>http://adrianovieira.github.io/plantuml-demo/docs/modeling/c4model/</link><pubDate>Fri, 26 Nov 2021 12:07:45 -0300</pubDate><guid>http://adrianovieira.github.io/plantuml-demo/docs/modeling/c4model/</guid><description>
&lt;p>The C4 model for visualising software architecture:
&lt;strong>Context&lt;/strong>, &lt;strong>Containers&lt;/strong>, &lt;strong>Components&lt;/strong>, and &lt;strong>Code&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;&lt;em>The C4 model is an easy to learn, developer friendly approach to software architecture diagramming. Good software architecture diagrams assist with communication inside/outside of software development/product teams, efficient onboarding of new staff, architecture reviews/evaluations, risk identification (e.g. &lt;a href="https://riskstorming.com/">risk-storming&lt;/a>), threat modelling (e.g. &lt;a href="https://daniel.spilsbury.io/2020/04/29/c4-threat-model.html">STRIDE/LINDDUN&lt;/a>), etc&lt;/em>&amp;rdquo;. - &lt;a href="https://c4model.com/">C4 Model&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: OpenAPI</title><link>http://adrianovieira.github.io/plantuml-demo/docs/modeling/openapi/</link><pubDate>Fri, 26 Nov 2021 12:08:24 -0300</pubDate><guid>http://adrianovieira.github.io/plantuml-demo/docs/modeling/openapi/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;blockquote>
&lt;p>&amp;ldquo;&lt;em>The OpenAPI Specification (OAS) defines a standard, language-agnostic interface to RESTful APIs which allows both humans and computers to discover and understand the capabilities of the service without access to source code, documentation, or through network traffic inspection. When properly defined, a consumer can understand and interact with the remote service with a minimal amount of implementation logic&lt;/em>.&lt;br>
&lt;em>An OpenAPI definition can then be used by documentation generation tools to display the API, code generation tools to generate servers and clients in various programming languages, testing tools, and many other use cases&lt;/em>&amp;rdquo;. - &lt;a href="https://swagger.io/specification/">OpenAPI Specification&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>