<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PlantUML demo â€“ PlantUML Demo</title><link>http://example.org/docs/</link><description>Recent content in PlantUML Demo on PlantUML demo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 Nov 2021 12:33:16 -0300</lastBuildDate><atom:link href="http://example.org/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Mindmap Diagram.md</title><link>http://example.org/docs/modeling/plantuml-mindmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/modeling/plantuml-mindmap/</guid><description>
&lt;h1 id="plantuml-demo">PlantUML demo&lt;/h1>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;PlantUML in a nutshell. PlantUML is a component that allows to quickly write: Sequence diagram. Usecase diagram. Class diagram. Object diagram. Activity diagram (here is the legacy syntax) Component diagram. Deployment diagram&amp;rdquo;&lt;/em> - &lt;a href="http://PlantUML.com">PlantUML.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;h3 id="mindmap-diagram">MindMap Diagram&lt;/h3>
&lt;ul>
&lt;li>Mindmap OrgMode syntax&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startmindmap
* Debian
** Ubuntu
*** Linux Mint
*** Kubuntu
*** Lubuntu
*** KDE Neon
** LMDE
** SolydXK
** SteamOS
** Raspbian with a very long name
*** &amp;lt;s&amp;gt;Raspmbc&amp;lt;/s&amp;gt; =&amp;gt; OSMC
*** &amp;lt;s&amp;gt;Raspyfi&amp;lt;/s&amp;gt; =&amp;gt; Volumio
@endmindmap
&lt;/code>&lt;/pre></description></item><item><title>Docs: Overview</title><link>http://example.org/docs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/overview/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>This is a placeholder page that shows you how to use this template site.&lt;/p>
&lt;/div>
&lt;p>The Overview is where your users find out about your project. Depending on the size of your docset, you can have a separate overview page (like this one) or put your overview contents in the Documentation landing page (like in the Docsy User Guide).&lt;/p>
&lt;p>Try answering these questions for your user in this page:&lt;/p>
&lt;h2 id="what-is-it">What is it?&lt;/h2>
&lt;p>Introduce your project, including what it does or lets you do, why you would use it, and its primary goal (and how it achieves it). This should be similar to your README description, though you can go into a little more detail here if you want.&lt;/p>
&lt;h2 id="why-do-i-want-it">Why do I want it?&lt;/h2>
&lt;p>Help your user know if your project will help them. Useful information can include:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>What is it good for?&lt;/strong>: What types of problems does your project solve? What are the benefits of using it?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>What is it not good for?&lt;/strong>: For example, point out situations that might intuitively seem suited for your project, but aren&amp;rsquo;t for some reason. Also mention known limitations, scaling issues, or anything else that might let your users know if the project is not for them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>What is it &lt;em>not yet&lt;/em> good for?&lt;/strong>: Highlight any useful features that are coming soon.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="where-should-i-go-next">Where should I go next?&lt;/h2>
&lt;p>Give your users next steps from the Overview. For example:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://gitlab.com/adrianovieira/plantuml-demo">This project repo&lt;/a>: Check out the example code!&lt;/li>
&lt;li>&lt;a href="http://example.org/docs/docsy/">Docsy&lt;/a>: Get started with Docsy&lt;/li>
&lt;/ul></description></item><item><title>Docs: Welcome to Docsy</title><link>http://example.org/docs/docsy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/docsy/</guid><description>
&lt;p>Welcome to the Docsy theme user guide! This guide shows you how to get started creating technical documentation sites using Docsy, including site customization and how to use Docsy&amp;rsquo;s blocks and templates.&lt;/p>
&lt;h2 id="what-is-docsy">What is Docsy?&lt;/h2>
&lt;p>Docsy is a theme for the &lt;a href="https://gohugo.io/">Hugo&lt;/a> static site generator that&amp;rsquo;s specifically designed for technical
documentation sets and has a lot of best practices built in. Use Docsy to get a working and reliable documentation
site up and running fast, and then get back to focusing on great content for your users.
&lt;a href="http://example.org/about">Learn more about Docsy&lt;/a>.&lt;/p>
&lt;p>In addition to the theme itself, we provide an &lt;a href="https://github.com/google/docsy-example">example site&lt;/a> that uses lots of Docsy features and has a useful skeleton site structure (with advice for what to put in it!) for a large technical documentation set. You can copy the entire site and edit it for your own projects, or just explore the site and its source to see what Docsy can do. The site you&amp;rsquo;re currently reading also uses Docsy and is a useful example of a smaller Docsy docset: feel free to copy it or borrow from it if it suits your needs better than the &amp;ldquo;big&amp;rdquo; example.&lt;/p>
&lt;p>Docsy itself does &lt;strong>not&lt;/strong> provide:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Source hosting and management&lt;/strong>: Our theme and site source files live on &lt;a href="https://github.com/">GitHub&lt;/a>, which is the simplest approach for most projects. However, you can also keep your project files in &lt;a href="https://about.gitlab.com/">GitLab&lt;/a>, &lt;a href="https://bitbucket.org/product">BitBucket&lt;/a>, locally, or wherever you like. Be aware that where your source files live may affect the Docsy features you can use (such as letting users file documentation issues) and site deployment options.&lt;/li>
&lt;li>&lt;strong>Site deployment&lt;/strong>: You can find out about deployment options in &lt;a href="./deployment/">Previews and Deployment&lt;/a>. This site uses &lt;a href="https://www.netlify.com/">Netlify&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Docsy also doesn&amp;rsquo;t actually generate your site&amp;rsquo;s HTML files: that&amp;rsquo;s Hugo&amp;rsquo;s job! Hugo takes your Markdown or HTML doc source files and Docsy&amp;rsquo;s theme files and builds them into a static site for deployment. You can find out more about Hugo and how it works in the &lt;a href="https://gohugo.io/documentation/">Hugo documentation&lt;/a>.&lt;/p>
&lt;h2 id="is-docsy-for-me">Is Docsy for me?&lt;/h2>
&lt;p>Docsy is particularly useful for medium to large technical documentation sets with 20+ pages of docs and/or multiple types of docs and pages: tutorials, reference documentation, blog posts, community pages, and so on.&lt;/p>
&lt;p>If you have a smaller project with only a couple of pages of documentation and hence simpler navigation needs, Docsy may be too heavyweight a solution for you. Instead, consider:&lt;/p>
&lt;ul>
&lt;li>A simpler Hugo or Jekyll theme: find out what&amp;rsquo;s available in Github Pages' &lt;a href="https://pages.github.com/themes/">built-in Jekyll options&lt;/a> and the &lt;a href="https://themes.gohugo.io/">Hugo theme gallery&lt;/a>.&lt;/li>
&lt;li>A good README file that tells users what your project does and links to some examples.&lt;/li>
&lt;/ul>
&lt;p>If you have a very large documentation project, our example site structure may not be sufficient either, though you can still use our theme, possibly with heavier customization.&lt;/p>
&lt;p>If you&amp;rsquo;d like to use Docsy&amp;rsquo;s layouts but prefer to use Jekyll, &lt;a href="https://github.com/vsoch">vsoch&lt;/a> has created a &lt;a href="https://github.com/vsoch/docsy-jekyll">Docsy Jekyll port&lt;/a> that includes many of Docsy&amp;rsquo;s features (though as this is a separate project it won&amp;rsquo;t be automatically updated along with Docsy).&lt;/p>
&lt;h2 id="ready-to-get-started">Ready to get started?&lt;/h2>
&lt;p>Find out how to build and serve your first site in &lt;a href="./getting-started/">Getting Started&lt;/a>. Or visit the &lt;a href="https://example.docsy.dev">example site&lt;/a> and &lt;a href="https://github.com/google/docsy-example">its repo&lt;/a> and start exploring!&lt;/p></description></item><item><title>Docs: C4 Model.adoc</title><link>http://example.org/docs/modeling/c4model/plantuml-c4model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/modeling/c4model/plantuml-c4model/</guid><description>
&lt;div class="sect1">
&lt;h2 id="_plantuml_sample_diagram">PlantUML sample Diagram&lt;/h2>
&lt;div class="sectionbody">
&lt;div style="page-break-after: always;">&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_c4_model_diagram">C4 Model Diagram&lt;/h3>
&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>&lt;em>&amp;#34;The C4 model was designed to help describe, document, and diagram custom-built, bespoke software systems. From this perspective, the C4 model can be used to describe a variety of software architectures (monolithic or distributed), built in a variety of programming languages, deployed on a variety of platforms (on-premises or cloud)&amp;#34;&lt;/em> - &lt;a href="http://C4Model.com">C4Model.com&lt;/a>.&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">sample diagram&lt;/div>
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
Person(admin, &amp;#34;Administrator&amp;#34;)
System_Boundary(c1, &amp;#34;Sample System&amp;#34;) {
Container(web_app, &amp;#34;Web Application&amp;#34;, &amp;#34;C#, ASP.NET Core 2.1 MVC&amp;#34;, &amp;#34;Allows users to compare multiple Twitter timelines&amp;#34;)
}
System(twitter, &amp;#34;Twitter&amp;#34;)
Rel(admin, web_app, &amp;#34;Uses&amp;#34;, &amp;#34;HTTPS&amp;#34;)
Rel(web_app, twitter, &amp;#34;Gets tweets from&amp;#34;, &amp;#34;HTTPS&amp;#34;)
@enduml&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div style="page-break-after: always;">&lt;/div>
&lt;div class="sect3">
&lt;h4 id="_c4_model_diagram_decorated">C4 Model Diagram (decorated)&lt;/h4>
&lt;div class="listingblock">
&lt;div class="title">decoreted diagram&lt;/div>
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/angular.puml
!include DEVICONS/java.puml
!include DEVICONS/msql_server.puml
!include FONTAWESOME/users.puml
LAYOUT_WITH_LEGEND()
Person(user, &amp;#34;Customer&amp;#34;, &amp;#34;People that need products&amp;#34;, $sprite=&amp;#34;users&amp;#34;)
Container(spa, &amp;#34;SPA&amp;#34;, &amp;#34;angular&amp;#34;, &amp;#34;The main interface that the customer interacts with&amp;#34;, $sprite=&amp;#34;angular&amp;#34;)
Container(api, &amp;#34;API&amp;#34;, &amp;#34;java&amp;#34;, &amp;#34;Handles all business logic&amp;#34;, $sprite=&amp;#34;java&amp;#34;)
ContainerDb(db, &amp;#34;Database&amp;#34;, &amp;#34;Microsoft SQL&amp;#34;, &amp;#34;Holds product, order and invoice information&amp;#34;, $sprite=&amp;#34;msql_server&amp;#34;)
Rel(user, spa, &amp;#34;Uses&amp;#34;, &amp;#34;https&amp;#34;)
Rel(spa, api, &amp;#34;Uses&amp;#34;, &amp;#34;https&amp;#34;)
Rel_R(api, db, &amp;#34;Reads/Writes&amp;#34;)
@enduml&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Sample with tag dependent sprites and custom legend text, for example:&lt;/p>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">decoreted diagram with tags&lt;/div>
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define osaPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-opensecurityarchitecture2-icons/master
!include osaPuml/Common.puml
!include osaPuml/User/all.puml
!include &amp;lt;office/Servers/database_server&amp;gt;
!include &amp;lt;office/Servers/file_server&amp;gt;
!include &amp;lt;office/Servers/application_server&amp;gt;
!include &amp;lt;office/Concepts/service_application&amp;gt;
!include &amp;lt;office/Concepts/firewall&amp;gt;
AddExternalPersonTag(&amp;#34;anonymous_ext&amp;#34;, $sprite=&amp;#34;osa_user_black_hat&amp;#34;, $legendText=&amp;#34;anonymous user&amp;#34;)
AddPersonTag(&amp;#34;customer&amp;#34;, $sprite=&amp;#34;osa_user_large_group&amp;#34;, $legendText=&amp;#34;aggregated user&amp;#34;)
AddPersonTag(&amp;#34;admin&amp;#34;, $sprite=&amp;#34;osa_user_audit,color=red&amp;#34;, $legendSprite=&amp;#34;osa_user_audit,scale=0.25,color=red&amp;#34;, $legendText=&amp;#34;administration user&amp;#34;)
AddContainerTag(&amp;#34;webApp&amp;#34;, $sprite=&amp;#34;application_server&amp;#34;, $legendText=&amp;#34;web app container&amp;#34;)
AddContainerTag(&amp;#34;db&amp;#34;, $sprite=&amp;#34;database_server&amp;#34;, $legendText=&amp;#34;database container&amp;#34;)
AddContainerTag(&amp;#34;files&amp;#34;, $sprite=&amp;#34;file_server&amp;#34;, $legendText=&amp;#34;file server container&amp;#34;)
AddContainerTag(&amp;#34;conApp&amp;#34;, $sprite=&amp;#34;service_application&amp;#34;, $legendText=&amp;#34;console app container&amp;#34;)
AddRelTag(&amp;#34;firewall&amp;#34;, $textColor=&amp;#34;$ARROW_COLOR&amp;#34;, $lineColor=&amp;#34;$ARROW_COLOR&amp;#34;, $sprite=&amp;#34;firewall,scale=0.3,color=red&amp;#34;, $legendText=&amp;#34;firewall&amp;#34;)
Person_Ext(anonymous_user, &amp;#34;Bob&amp;#34;, $tags=&amp;#34;anonymous_ext&amp;#34;)
Person(aggregated_user, &amp;#34;Sam, Ivone&amp;#34;, $tags=&amp;#34;customer&amp;#34;)
Person(administration_user, &amp;#34;Bernd&amp;#34;, $tags=&amp;#34;admin&amp;#34;)
System_Boundary(c1, &amp;#34;techtribes.js&amp;#34;){
Container(web_app, &amp;#34;Web Application&amp;#34;, &amp;#34;Java, Spring MVC, Tomcat 7.x&amp;#34;, $tags=&amp;#34;webApp&amp;#34;)
ContainerDb(rel_db, &amp;#34;Relational Database&amp;#34;, &amp;#34;MySQL 5.5.x&amp;#34;, $tags=&amp;#34;db&amp;#34;)
Container(filesystem, &amp;#34;File System&amp;#34;, &amp;#34;FAT32&amp;#34;, $tags=&amp;#34;files&amp;#34;)
ContainerDb(nosql, &amp;#34;NoSQL Data Store&amp;#34;, &amp;#34;MongoDB 2.2.x&amp;#34;, $tags=&amp;#34;db&amp;#34;)
Container(updater, &amp;#34;Updater&amp;#34;, &amp;#34;Java 7 Console App&amp;#34;, $tags=&amp;#34;conApp&amp;#34;)
}
Rel(anonymous_user, web_app, &amp;#34;Uses&amp;#34;, &amp;#34;HTTPS&amp;#34;, $tags=&amp;#34;firewall&amp;#34;)
Rel(aggregated_user, web_app, &amp;#34;Uses&amp;#34;, &amp;#34;HTTPS&amp;#34;, $tags=&amp;#34;firewall&amp;#34;)
Rel(administration_user, web_app, &amp;#34;Uses&amp;#34;, &amp;#34;HTTPS&amp;#34;, $tags=&amp;#34;firewall&amp;#34;)
Rel(web_app, rel_db, &amp;#34;Reads from and writes to&amp;#34;, &amp;#34;SQL/JDBC, port 3306&amp;#34;)
Rel(web_app, filesystem, &amp;#34;Reads from&amp;#34;)
Rel(web_app, nosql, &amp;#34;Reads from&amp;#34;, &amp;#34;MongoDB wire protocol, port 27017&amp;#34;)
Rel_U(updater, rel_db, &amp;#34;Reads from and writes data to&amp;#34;, &amp;#34;SQL/JDBC, port 3306&amp;#34;)
Rel_U(updater, filesystem, &amp;#34;Writes to&amp;#34;)
Rel_U(updater, nosql, &amp;#34;Reads from and writes to&amp;#34;, &amp;#34;MongoDB wire protocol, port 27017&amp;#34;)
Lay_R(rel_db, filesystem)
SHOW_LEGEND()
@enduml&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Samples Diagrams.md</title><link>http://example.org/docs/modeling/uml/plantuml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/modeling/uml/plantuml/</guid><description>
&lt;h1 id="plantuml-demo">PlantUML demo&lt;/h1>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;PlantUML in a nutshell. PlantUML is a component that allows to quickly write: Sequence diagram. Usecase diagram. Class diagram. Object diagram. Activity diagram (here is the legacy syntax) Component diagram. Deployment diagram&amp;rdquo;&lt;/em> - &lt;a href="http://PlantUML.com">PlantUML.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;h3 id="sequence-diagram">Sequence Diagram&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response
Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: Another authentication Response
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Declaring participant&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">actor Bob #red
' The only difference between actor
'and participant is the drawing
participant Alice
participant &amp;quot;I have a really\nlong name&amp;quot; as L #99FF99
/' You can also declare:
participant L as &amp;quot;I have a really\nlong name&amp;quot; #99FF99
'/
Alice-&amp;gt;Bob: Authentication Request
Bob-&amp;gt;Alice: Authentication Response
Bob-&amp;gt;L: Log transaction
&lt;/code>&lt;/pre>&lt;h3 id="mindmap-diagram">MindMap Diagram&lt;/h3>
&lt;ul>
&lt;li>Mindmap OrgMode syntax&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">@startmindmap
* Debian
** Ubuntu
*** Linux Mint
*** Kubuntu
*** Lubuntu
*** KDE Neon
** LMDE
** SolydXK
** SteamOS
** Raspbian with a very long name
*** &amp;lt;s&amp;gt;Raspmbc&amp;lt;/s&amp;gt; =&amp;gt; OSMC
*** &amp;lt;s&amp;gt;Raspyfi&amp;lt;/s&amp;gt; =&amp;gt; Volumio
@endmindmap
&lt;/code>&lt;/pre></description></item><item><title>Docs: UML samples.adoc</title><link>http://example.org/docs/modeling/uml/plantuml-samples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/modeling/uml/plantuml-samples/</guid><description>
&lt;div class="sect1">
&lt;h2 id="_plantuml_sample_diagram">PlantUML sample Diagram&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="_plantuml_samples">PlantUML samples&lt;/h3>
&lt;div class="quoteblock">
&lt;blockquote>
&lt;div class="paragraph">
&lt;p>&lt;em>&amp;#34;PlantUML in a nutshell. PlantUML is a component that allows to quickly write: Sequence diagram. Usecase diagram. Class diagram. Object diagram. Activity diagram (here is the legacy syntax) Component diagram. Deployment diagram&amp;#34;&lt;/em> - &lt;a href="http://PlantUML.com">PlantUML.com&lt;/a>.&lt;/p>
&lt;/div>
&lt;/blockquote>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">Sequence Diagram&lt;/div>
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response
Alice -&amp;gt; Bob: Another authentication Request
Alice &amp;lt;-- Bob: Another authentication Response
@enduml&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">Sequence Diagram with actor and participant&lt;/div>
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
actor Bob #red
&amp;#39; The only difference between actor
&amp;#39;and participant is the drawing
participant Alice
participant &amp;#34;I have a really\nlong name&amp;#34; as L #99FF99
/&amp;#39; You can also declare:
participant L as &amp;#34;I have a really\nlong name&amp;#34; #99FF99
&amp;#39;/
Alice-&amp;gt;Bob: Authentication Request
Bob-&amp;gt;Alice: Authentication Response
Bob-&amp;gt;L: Log transaction
@enduml&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div class="listingblock">
&lt;div class="title">Class Diagram&lt;/div>
&lt;div class="content">
&lt;pre class="highlight">&lt;code class="language-plantuml" data-lang="plantuml">@startuml
class BlockProcessor
class DiagramBlock
class DitaaBlock
class PlantUmlBlock
BlockProcessor &amp;lt;|-- DiagramBlock
DiagramBlock &amp;lt;|-- DitaaBlock
DiagramBlock &amp;lt;|-- PlantUmlBlock
@enduml&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Samples Context Diagrams.md</title><link>http://example.org/docs/modeling/c4model/plantuml-c4model-context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/modeling/c4model/plantuml-c4model-context/</guid><description>
&lt;h1 id="plantuml-demo">PlantUML demo&lt;/h1>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;PlantUML in a nutshell. PlantUML is a component that allows to quickly write: Sequence diagram. Usecase diagram. Class diagram. Object diagram. Activity diagram (here is the legacy syntax) Component diagram. Deployment diagram&amp;rdquo;&lt;/em> - &lt;a href="http://PlantUML.com">PlantUML.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="getting-started">Getting started&lt;/h2>
&lt;h3 id="c4-model-diagram">C4 Model Diagram&lt;/h3>
&lt;blockquote>
&lt;p>&lt;em>&amp;ldquo;The C4 model was designed to help describe, document, and diagram custom-built, bespoke software systems. From this perspective, the C4 model can be used to describe a variety of software architectures (monolithic or distributed), built in a variety of programming languages, deployed on a variety of platforms (on-premises or cloud)&amp;quot;&lt;/em> - &lt;a href="http://C4Model.com">C4Model.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
Person(admin, &amp;quot;Administrator&amp;quot;)
System_Boundary(c1, &amp;quot;Sample System&amp;quot;) {
Container(web_app, &amp;quot;Web Application&amp;quot;, &amp;quot;C#, ASP.NET Core 2.1 MVC&amp;quot;, &amp;quot;Allows users to compare multiple Twitter timelines&amp;quot;)
}
System(twitter, &amp;quot;Twitter&amp;quot;)
Rel(admin, web_app, &amp;quot;Uses&amp;quot;, &amp;quot;HTTPS&amp;quot;)
Rel(web_app, twitter, &amp;quot;Gets tweets from&amp;quot;, &amp;quot;HTTPS&amp;quot;)
&lt;/code>&lt;/pre>&lt;h4 id="c4-model-diagram-decorated">C4 Model Diagram (decorated)&lt;/h4>
&lt;pre tabindex="0">&lt;code class="language-plantuml" data-lang="plantuml">!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/angular.puml
!include DEVICONS/java.puml
!include DEVICONS/msql_server.puml
!include FONTAWESOME/users.puml
LAYOUT_WITH_LEGEND()
Person(user, &amp;quot;Customer&amp;quot;, &amp;quot;People that need products&amp;quot;, $sprite=&amp;quot;users&amp;quot;)
Container(spa, &amp;quot;SPA&amp;quot;, &amp;quot;angular&amp;quot;, &amp;quot;The main interface that the customer interacts with&amp;quot;, $sprite=&amp;quot;angular&amp;quot;)
Container(api, &amp;quot;API&amp;quot;, &amp;quot;java&amp;quot;, &amp;quot;Handles all business logic&amp;quot;, $sprite=&amp;quot;java&amp;quot;)
ContainerDb(db, &amp;quot;Database&amp;quot;, &amp;quot;Microsoft SQL&amp;quot;, &amp;quot;Holds product, order and invoice information&amp;quot;, $sprite=&amp;quot;msql_server&amp;quot;)
Rel(user, spa, &amp;quot;Uses&amp;quot;, &amp;quot;https&amp;quot;)
Rel(spa, api, &amp;quot;Uses&amp;quot;, &amp;quot;https&amp;quot;)
Rel_R(api, db, &amp;quot;Reads/Writes&amp;quot;)
&lt;/code>&lt;/pre></description></item></channel></rss>